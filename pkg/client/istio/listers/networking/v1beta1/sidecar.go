/*
Copyright 2023 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	networkingv1beta1 "istio.io/client-go/pkg/apis/networking/v1beta1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// SidecarLister helps list Sidecars.
// All objects returned here must be treated as read-only.
type SidecarLister interface {
	// List lists all Sidecars in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*networkingv1beta1.Sidecar, err error)
	// Sidecars returns an object that can list and get Sidecars.
	Sidecars(namespace string) SidecarNamespaceLister
	SidecarListerExpansion
}

// sidecarLister implements the SidecarLister interface.
type sidecarLister struct {
	listers.ResourceIndexer[*networkingv1beta1.Sidecar]
}

// NewSidecarLister returns a new SidecarLister.
func NewSidecarLister(indexer cache.Indexer) SidecarLister {
	return &sidecarLister{listers.New[*networkingv1beta1.Sidecar](indexer, networkingv1beta1.Resource("sidecar"))}
}

// Sidecars returns an object that can list and get Sidecars.
func (s *sidecarLister) Sidecars(namespace string) SidecarNamespaceLister {
	return sidecarNamespaceLister{listers.NewNamespaced[*networkingv1beta1.Sidecar](s.ResourceIndexer, namespace)}
}

// SidecarNamespaceLister helps list and get Sidecars.
// All objects returned here must be treated as read-only.
type SidecarNamespaceLister interface {
	// List lists all Sidecars in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*networkingv1beta1.Sidecar, err error)
	// Get retrieves the Sidecar from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*networkingv1beta1.Sidecar, error)
	SidecarNamespaceListerExpansion
}

// sidecarNamespaceLister implements the SidecarNamespaceLister
// interface.
type sidecarNamespaceLister struct {
	listers.ResourceIndexer[*networkingv1beta1.Sidecar]
}
